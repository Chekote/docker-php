#!/usr/bin/env bash

COLOR_GREEN='\033[0;32m'
COLOR_RED="\033[0;31m"
COLOR_RESET='\033[0m'
COLOR_YELLOW='\033[1;33m'

REPO=chekote/php

PATCH_VERSION=
#######################################
# Checks the exit code passed and exits with it if it is not zero
#
# Arguments:
#  1 the exit code to check
#######################################
exitCheck() {
  if [ $1 != 0 ]; then
    (>&2 printf "${COLOR_RED}Got exit code $1, quitting.${COLOR_RESET}\n")
    exit $1
  fi
}

#######################################
# Checks two PHP versions to determine if the 1st is less than the 2nd
#
# Arguments:
#  1 the 1st version to compare
#  2 the 2nd version to compare
#######################################
versionLessThan() {
  docker container run --rm chekote/php:7 php -r "version_compare('$1', '$2', '<') ? exit(1) : exit(0);";
  return $?
}

#######################################
# Asserts that PHP version being built equal to or higher than the specified version
#
# Arguments:
#  1 the version to assert
#######################################
assertVersionAtLeast() {
  ACTUAL_VERSION="${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}"
  if versionLessThan $1 ${ACTUAL_VERSION}; then
    printf "${COLOR_YELLOW}No further images supported for PHP version ${ACTUAL_VERSION}. Quitting...${COLOR_RESET}\n"
    exit 0
  fi
}

#######################################
# Builds and pushes all of the PHP images for the current major and minor version
#
# Globals:
#   MAJOR_VERSION the major PHP version to build images for
#   MINOR_VERSION the minor PHP version to build images for
#######################################
buildImage() {
  IMAGE=$1

  if [ "${IMAGE}" = "php" ]; then
    TAG_SUFFIX=""
  else
    TAG_SUFFIX="-${IMAGE}"
  fi

  local MAJOR_TAG=${MAJOR_VERSION}${TAG_SUFFIX}
  local MINOR_TAG=${MAJOR_VERSION}.${MINOR_VERSION}${TAG_SUFFIX}

  echo ""
  echo "Building ${IMAGE} image"
  docker image build -f ${IMAGE}.docker --build-arg PHP_VERSION=${MAJOR_VERSION}.${MINOR_VERSION} -t chekote/php:${MAJOR_VERSION}${TAG_SUFFIX} .
  exitCheck $?

  printf "${COLOR_GREEN}Successfully built image${COLOR_RESET}\n"

  if [ "${IMAGE}" = "php" ]; then
    PATCH_VERSION=`docker run chekote/php:${MAJOR_VERSION} php -r "echo explode('.', substr(PHP_VERSION, 0, strpos(PHP_VERSION, '-')))[2];"`
    echo "PHP Patch Version: ${PATCH_VERSION}"
  fi

  local PATCH_TAG=${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}${TAG_SUFFIX}

  echo ""
  echo "Tagging image"
  docker image tag chekote/php:${MAJOR_VERSION}${TAG_SUFFIX} chekote/php:${MAJOR_VERSION}.${MINOR_VERSION}${TAG_SUFFIX}
  exitCheck $?

  docker image tag chekote/php:${MAJOR_VERSION}${TAG_SUFFIX} chekote/php:${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}${TAG_SUFFIX}
  exitCheck $?

  printf "${COLOR_GREEN}Successfully created image tags${COLOR_RESET}\n"

  echo ""
  echo "Pushing ${IMAGE} image"
  pushImage ${REPO}:${MAJOR_TAG}
  pushImage ${REPO}:${MINOR_TAG}
  pushImage ${REPO}:${PATCH_TAG}
}

#######################################
# Pushes the specified image
#
# Arguments:
#  1 the image to push
#######################################
pushImage() {
  docker image push $1
  exitCheck $?
  printf "${COLOR_GREEN}Successfully pushed image $1${COLOR_RESET}\n"
}

echo "Please enter the major PHP version (e.g. 5, 7), followed by [ENTER]:"
read MAJOR_VERSION

echo ""
echo "Please enter the minor PHP version (e.g. 1, 2, 3), followed by [ENTER]:"
read MINOR_VERSION

buildImage php

# requires 5.3.2
assertVersionAtLeast 5.3.2
buildImage composer

# requires 5.3.3
assertVersionAtLeast 5.3.3
buildImage behat3.4

# requires 5.5.9
assertVersionAtLeast 5.5.9
buildImage laravel5.1

# requires 5.6
assertVersionAtLeast 5.6
buildImage phpunit5

# requires 5.6.4
assertVersionAtLeast 5.6.4
buildImage laravel5.3

# requires 7.0
assertVersionAtLeast 7.0
buildImage phpunit6

# requires 7.1
assertVersionAtLeast 7.1
buildImage phpunit7

# requires 7.1.3
assertVersionAtLeast 7.1.3
buildImage laravel5.6
buildImage laravel5.7
