#!/usr/bin/env bash

set -euo pipefail;

. bin/lib/colors.bash
. bin/lib/docker.bash
. bin/lib/log.bash
. bin/lib/out.bash

OWNER=chekote
IMAGE=
PATCH_VERSION=

#######################################
# Checks that the PHP version being built is between the two specified versions (inclusive)
#
# Arguments:
#  1 the lowest version of the range to check
#  2 the highest version of the range to check
# Return:
#  0 if the version being build is between the two specified versions. 1 if not.
#######################################
versionBetween() {
  local full_version="$MAJOR_VERSION.$MINOR_VERSION.$PATCH_VERSION"
  if versionLessThan "$full_version" "$1"; then
    return 1;
  fi

  if versionGreaterThan "$full_version" "$2"; then
    return 1;
  fi

  return 0;
}

#######################################
# Checks two PHP versions to determine if the 1st is greater than the 2nd
#
# Arguments:
#  1 the 1st version to compare
#  2 the 2nd version to compare
# Globals:
#  OWNER the name of Docker Hub user where the images are hosted
# Return:
#  0 if the 1st version is greater than the 2nd. 1 if not.
#######################################
versionGreaterThan() {
  docker container run --rm "$OWNER/php:7" php -r "version_compare('$1', '$2', '>') ? exit(0) : exit(1);";
  return $?
}

#######################################
# Checks two PHP versions to determine if the 1st is less than the 2nd
#
# Arguments:
#  1 the 1st version to compare
#  2 the 2nd version to compare
# Return:
#  0 if the 1st version is less than the 2nd. 1 if not.
#######################################
versionLessThan() {
  docker container run --rm "$OWNER/php:7" php -r "version_compare('$1', '$2', '<') ? exit(0) : exit(1);";
  return $?
}

#######################################
# Asserts that PHP version being built equal to or higher than the specified version
#
# Arguments:
#  1 the version to assert
# Return:
#  0 if the version being build is equal to or higher than the specified version. 1 if not.
#######################################
assertVersionAtLeast() {
  local full_version="$MAJOR_VERSION.$MINOR_VERSION.$PATCH_VERSION"
  if versionLessThan "$full_version" "$1"; then
    out.warn.ln "No further images supported for PHP version $full_version. Quitting..."
    return 1
  fi

  return 0
}

#######################################
# Builds and pushes all of the PHP images for the current major and minor version
#
# Arguments:
#  1 the image to build. Must have a matching .docker file in the root of the project.
# Globals:
#   IMAGE         the name of the image currently being build
#   MAJOR_VERSION the major PHP version to build images for
#   MINOR_VERSION the minor PHP version to build images for
#   PATCH_VERSION the patch PHP version that was built
#######################################
buildImage() {
  IMAGE="$1"

  local major_tag minor_tag patch_tag latest_tag repo

  TAG_SUFFIX=$([[ "$IMAGE" == "php" ]] && echo "" || echo "php")

  major_tag="$TAG_SUFFIX$MAJOR_VERSION"
  minor_tag="$major_tag.$MINOR_VERSION"

  repo="$OWNER/$IMAGE"

  buildMultiArchImage "$IMAGE" "$repo:latest"
  pushImage "$repo:latest"

  buildMultiArchImage "$IMAGE" "$repo:$major_tag"
  pushImage "$repo:$major_tag"

  if [[ "$IMAGE" = "php" ]]; then
    updatePatchVersion
  fi

  patch_tag="$minor_tag.$PATCH_VERSION"
  latest_tag="$patch_tag-$(date '+%Y-%m-%d-%H-%M-%S')"

  buildMultiArchImage "$IMAGE" "$repo:$minor_tag"
  pushImage "$repo:$minor_tag"

  buildMultiArchImage "$IMAGE" "$repo:$patch_tag"
  pushImage "$repo:$patch_tag"

  buildMultiArchImage "$IMAGE" "$repo:$latest_tag"
  pushImage "$repo:$latest_tag"
}

#######################################
# Builds a multi-arch image
#
# Arguments:
#   1 the image to build. Must have a matching .docker file in the root of the project.
#   2 the tag to use for the image
# Globals:
#   MAJOR_VERSION the major PHP version to build images for
#   MINOR_VERSION the minor PHP version to build images for
#######################################
buildMultiArchImage() {
  local image="$1"
  local tag="$2"

  out.info.ln ""
  out.info.ln "Building $image multi-arch image with tag '$tag'"
  shell.command.retry docker build --platform linux/arm64/v8,linux/amd64 -f "$image.docker" \
      --build-arg PHP_VERSION="$MAJOR_VERSION.$MINOR_VERSION" -t "$tag" . > "logs/$image.log" 2>&1
  out.success.ln "Successfully built multi-arch image with tag '$tag'"
}


#######################################
# Pushes an image
#
# Arguments:
#   1 the tag of the image to push
#######################################
pushImage() {
  local tag="$1"

  out.info.ln "Pushing image '$tag'"
  shell.command.retry docker push "$tag"
  out.success.ln "Successfully pushed '$tag'"
}

#######################################
# Tags the specified image
#
# Arguments
#  1 the image to tag
#  2 the tag to use
#######################################
tagImage() {
  docker image tag "$1" "$2"
  out.success.ln "Successfully tagged $2"
}

#######################################
# Extracts the patch version from PHP major version image
#
# Arguments
#  1 the image to get the patch version from
#
# Globals:
#   PATCH_VERSION the patch PHP version. e.g. 27 for 7.2.27
#######################################
updatePatchVersion() {
   PATCH_VERSION=$(docker run --rm "$OWNER/$IMAGE:$MAJOR_VERSION" php -r '
       $version = ($dashPos = strpos(PHP_VERSION, "-")) === false ? PHP_VERSION : substr(PHP_VERSION, 0, $dashPos);
       echo explode(".", $version)[2];
   ')

   log.info "PHP Patch Version: $PATCH_VERSION"
}

#######################################
# Builds all images
#######################################
buildAll() {
  buildImage php

  # requires 5.3.2
  assertVersionAtLeast 5.3.2
  buildImage composer

  # requires 5.3.3
  assertVersionAtLeast 5.3.3
  buildImage behat3.4
  buildImage behat3.4-sqlite

  #requires 7.3
  assertVersionAtLeast 7.3
  buildImage phpunit9

  #requires 8.0
  if versionBetween 8.0 8.2.999; then
    buildImage laravel9.x
  else
    out.warn "Skipping Laravel 9.x. PHP version is not between 8.0 & 8.2"
  fi

  #requires 8.1
  if ! assertVersionAtLeast 8.1; then
    out.warn "No further images supported for PHP version $MAJOR_VERSION.$MINOR_VERSION."
    return
  fi
  buildImage phpunit10

  if versionBetween 8.1 8.3.999; then
    buildImage laravel10.x
  else
    out.warn "Skipping Laravel 10.x. PHP version is not between 8.1 & 8.3"
  fi

  #requires 8.2
  if ! assertVersionAtLeast 8.2; then
    out.warn "No further images supported for PHP version $MAJOR_VERSION.$MINOR_VERSION."
    return
  fi
  buildImage phpunit11
  buildImage laravel11.x
  buildImage laravel12.x
}

for version in '8.1' '8.2' '8.3' '8.4'; do
  IFS='.' read -r MAJOR_VERSION MINOR_VERSION <<< "$version"

  buildAll
done

out.success "FIN!"
