#!/usr/bin/env bash

ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"

. "$ROOT"/bin/lib/colors.sh
. "$ROOT"/bin/lib/log.sh
. "$ROOT"/bin/lib/out.sh

REPO=chekote/php

PATCH_VERSION=
TOKEN=

#######################################
# Grabs a token from auth.docker.com for use with the Docker API V2
#
# Globals:
#   TOKEN
# Return:
#  0 if the auth succeed. 1 if not.
#######################################
dockerAuth() {
  local RESPONSE="$(curl 'https://auth.docker.io/token?service=registry.docker.io&scope=repository:'chekote/php':pull' 2>/dev/null)"
  TOKEN=$(echo "$RESPONSE" | jq -r .token)

  if [ "$TOKEN" == null ]; then
    out.error "Docker login failed: $RESPONSE"
    return 1
  fi

  return 0
}

#######################################
# Provides the latest tag that has been published for the specified tag and suffix
#
# Will check if "$REPO:$TAG$SUFFIX" is available first, followed by "$REPO:$TAG-{a..z}$SUFFIX". The last tag that
# exists will be echoed to stdout. If the tag does not exist, then an empty string will be echoed to stdout.
#
# Arguments:
#   1 the tag, e.g. 5.3.6
#   2 the tag suffix, e.g. -phpunit6
#######################################
latestTag() {
  local TAG=$1
  local SUFFIX=$2
  local LATEST_TAG

  log.info "Checking if $TAG$SUFFIX exists"
  if ! tagExists "$TAG$SUFFIX"; then
    log.info "Tag $TAG$SUFFIX does not exist"
    log.info "There is no latest tag"
    echo ""
    return 0
  else
    log.info "Tag $TAG$SUFFIX exists"
  fi

  LATEST_TAG="$TAG$SUFFIX"
  log.info "latestTag::LATEST_TAG is now $LATEST_TAG"
  for X in {a..z}; do
    NEXT_TAG="$TAG.$X$SUFFIX"
    if tagExists "$NEXT_TAG"; then
      log.info "Tag $NEXT_TAG exists"
      LATEST_TAG="$NEXT_TAG"
      log.info "latestTag::LATEST_TAG is now $LATEST_TAG"
    else
      log.info "Tag $NEXT_TAG does not exist"
      log.info "$LATEST_TAG is the latest tag"
      break
    fi
  done

  log.info "returning $LATEST_TAG"
  echo "$LATEST_TAG"
}

#######################################
# Determines the next available tag for the specified tag and suffix
#
# Will check if "$REPO:$TAG$SUFFIX" is available first, and if not will check"$REPO:$TAG-{a..z}$SUFFIX".
# If an available tag is found, it will be echoed to stdout
#
# Arguments:
#   1 the tag, e.g. 5.3.6
#   2 the tag suffix, e.g. -phpunit6
# Returns:
#   0 if a next available tag was found. 1 if no tags are available.
#######################################
nextAvailableTag() {
  local TAG=$1
  local SUFFIX=$2
  local NEXT_TAG

  if ! tagExists "$TAG$SUFFIX"; then
    echo "$TAG$SUFFIX"
    return 0
  fi

  for X in {a..z}; do
    NEXT_TAG="$TAG.$X$SUFFIX"
    if ! tagExists "$NEXT_TAG"; then
      echo "$NEXT_TAG"
      return 0
    fi
  done

  echo "No available tags for $TAG$SUFFIX"
  return 1
}

#######################################
# Checks if the specified tag exists in the chekote/php repo
#
# Arguments:
#  1 the tag
# Return:
#  0 if the tag exists, 1 if not (or an error occurred).
#######################################
tagExists() {
  log.info "Checking for existence of tag $1"
  curl -s -H "Authorization: Bearer $TOKEN" https://index.docker.io/v2/chekote/php/tags/list | jq -r .tags | grep "\"$1\"" > /dev/null 2>&1
}

#######################################
# Gets the SHA for a tag
#
# Arguments:
#  1 the tag
#######################################
tagSHA() {
  log.info "Getting SHA for tag $1"
  curl -s -H "Authorization: Bearer $TOKEN" -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
      https://index.docker.io/v2/chekote/php/manifests/$1 | jq -r .config.digest | cut -d':' -f 2
}

#######################################
# Gets the patch tag for the image being built
#
# Arguments:
#  1 the tag
#  1 the tag suffix
#  1 the SHA of the image
# Returns:
#   0 if a patch tag could be determined. 1 if no tags are available.
#######################################
patchTag() {
  local TAG=$1
  local SUFFIX=$2
  local SHA=$3
  local LATEST_TAG

  log.info "Checking if $TAG$SUFFIX exists"
  if ! tagExists "$TAG$SUFFIX"; then
    log.info "Tag $TAG$SUFFIX does not exist"
    echo "$TAG$SUFFIX"
    return 0
  else
    log.info "Tag $TAG$SUFFIX exists"
  fi

  log.info "patchTag::LATEST_TAG before: '$LATEST_TAG'"
  LATEST_TAG=$(latestTag "$TAG" "$SUFFIX")
  log.info "patchTag::LATEST_TAG after: '$LATEST_TAG'"

  LATEST_TAG_SHA=$(tagSHA "$LATEST_TAG");
  log.info "Latest Tag ($LATEST_TAG) SHA: $LATEST_TAG_SHA"
  log.info "New SHA: $SHA"

  if [ "$LATEST_TAG_SHA" = "$SHA" ]; then
    echo "$LATEST_TAG"
    return 0
  fi

  nextAvailableTag "$TAG" "$SUFFIX"
}

#######################################
# Checks the exit code passed and exits with it if it is not zero
#
# Arguments:
#  1 the exit code to check
#######################################
exitCheck() {
  if [ $1 != 0 ]; then
    log.error "Got exit code $1, quitting."
    exit $1
  fi
}

#######################################
# Checks that the PHP version being built is between the two specified versions (inclusive)
#
# Arguments:
#  1 the lowest version of the range to check
#  2 the highest version of the range to check
# Return:
#  0 if the version being build is between the two specified versions. 1 if not.
#######################################
versionBetween() {
  ACTUAL_VERSION="$MAJOR_VERSION.$MINOR_VERSION.$PATCH_VERSION"
  if versionLessThan "$ACTUAL_VERSION" "$1"; then
    return 1;
  fi

  if versionGreaterThan "$ACTUAL_VERSION" "$2"; then
    return 1;
  fi

  return 0;
}

#######################################
# Checks two PHP versions to determine if the 1st is greater than the 2nd
#
# Arguments:
#  1 the 1st version to compare
#  2 the 2nd version to compare
# Globals:
#  REPO  the name of Docker Hub repo where the images are hosted
# Return:
#  0 if the 1st version is greater than the 2nd. 1 if not.
#######################################
versionGreaterThan() {
  docker container run --rm "$REPO:7" php -r "version_compare('$1', '$2', '>') ? exit(0) : exit(1);";
  return $?
}

#######################################
# Checks two PHP versions to determine if the 1st is less than the 2nd
#
# Arguments:
#  1 the 1st version to compare
#  2 the 2nd version to compare
# Return:
#  0 if the 1st version is less than the 2nd. 1 if not.
#######################################
versionLessThan() {
  docker container run --rm ${REPO}:7 php -r "version_compare('$1', '$2', '<') ? exit(0) : exit(1);";
  return $?
}

#######################################
# Asserts that PHP version being built equal to or higher than the specified version
#
# Arguments:
#  1 the version to assert
#######################################
assertVersionAtLeast() {
  ACTUAL_VERSION="$MAJOR_VERSION.$MINOR_VERSION.$PATCH_VERSION"
  if versionLessThan "$ACTUAL_VERSION" "$1"; then
    out.warn "No further images supported for PHP version $ACTUAL_VERSION. Quitting..."
    exit 0
  fi
}

#######################################
# Builds and pushes all of the PHP images for the current major and minor version
#
# Arguments:
#  1 the image to build. Must have a matching .docker file in the root of the project.
# Globals:
#   IMAGE         the name of the image currently being build
#   REPO          the name of Docker Hub repo where the images are hosted
#   MAJOR_VERSION the major PHP version to build images for
#   MINOR_VERSION the minor PHP version to build images for
#   PATCH_VERSION the patch PHP version that was built
#######################################
buildImage() {
  IMAGE=$1
  local TAG_SUFFIX
  local PATCH_TAG
  local SHA

  if [ "$IMAGE" = "php" ]; then
    TAG_SUFFIX=""
  else
    TAG_SUFFIX="-$IMAGE"
  fi

  local MAJOR_TAG="$MAJOR_VERSION$TAG_SUFFIX"
  local MINOR_TAG="$MAJOR_VERSION.$MINOR_VERSION$TAG_SUFFIX"

  out.info ""
  out.info "Building $IMAGE image"
  docker image build -f "$IMAGE.docker" --build-arg PHP_VERSION="$MAJOR_VERSION.$MINOR_VERSION" -t "$REPO:$MAJOR_TAG" . > "logs/$IMAGE.log" 2>&1
  exitCheck $?

  out.success "Successfully built image"

  if [ "$IMAGE" = "php" ]; then
    PATCH_VERSION=`docker run "$REPO:$MAJOR_VERSION" php -r "echo explode('.', substr(PHP_VERSION, 0, strpos(PHP_VERSION, '-')))[2];"`
    log.info "PHP Patch Version: $PATCH_VERSION"
  fi

  SHA=$(docker image inspect "$REPO:$MAJOR_TAG" | jq -r '.[0].Id' | cut -d':' -f 2);

  log.info "Determining Patch Tag"
  PATCH_TAG=$(patchTag "$MAJOR_VERSION.$MINOR_VERSION.$PATCH_VERSION" "$TAG_SUFFIX" "$SHA")
  log.info "Patch Tag: $PATCH_TAG"

  out.info ""
  out.info "Tagging image"
  tagImage "$REPO:$MAJOR_TAG" "$REPO:$MINOR_TAG"
  tagImage "$REPO:$MAJOR_TAG" "$REPO:$PATCH_TAG"
  out.success "Successfully created image tags"

  out.info ""
  out.info "Pushing $IMAGE images"
  pushIfShaDiff "$MAJOR_TAG" "$SHA"
  pushIfShaDiff "$MINOR_TAG" "$SHA"
  pushIfShaDiff "$PATCH_TAG" "$SHA"
  out.success "Successfully pushed images"
}

#######################################
# Arguments:
#   1     the tag to push
#   2     the sha of the image currently being built
# Globals:
#   IMAGE         the name of the image currently being build
#   REPO          the name of Docker Hub repo where the images are hosted
#######################################
pushIfShaDiff() {
  local TAG=$1;
  local SHA=$2;

  if [ "$SHA" == $(tagSHA "$TAG") ]; then
    echo "Skipping push for tag $TAG. Published tag already matches SHA"
  else
    pushImage "$REPO:$TAG"
  fi
}

#######################################
# Pushes the specified image
#
# Arguments:
#  1 the image to push
#######################################
pushImage() {
  docker image push $1
  exitCheck $?
  out.success "Successfully pushed image $1"
}

#######################################
# Tags the specified image
#
# Arguments
#  1 the image to tag
#  2 the tag to use
#######################################
tagImage() {
  docker image tag $1 $2
  exitCheck $?
  out.success "Successfully tagged $2"
}

dockerAuth

out.info "Please enter the major PHP version (e.g. 5, 7), followed by [ENTER]:"
read MAJOR_VERSION

out.info ""
out.info "Please enter the minor PHP version (e.g. 1, 2, 3), followed by [ENTER]:"
read MINOR_VERSION

buildImage php

# requires 5.3.2
assertVersionAtLeast 5.3.2
buildImage composer

# requires 5.3.3
assertVersionAtLeast 5.3.3
buildImage behat3.4

# requires 5.5.9
assertVersionAtLeast 5.5.9
buildImage laravel5.1

# requires 5.6
assertVersionAtLeast 5.6
buildImage phpunit5

if versionBetween 5.6.4 7.1.32; then
  buildImage laravel5.2
  buildImage laravel5.3
else
  out.warn "Skipping Laravel 5.2 & 5.3. PHP version is not between 5.6.4 & 7.1.32"
fi

# requires 5.6.4
assertVersionAtLeast 5.6.4
buildImage laravel5.4

# requires 7.0
assertVersionAtLeast 7.0
buildImage laravel5.5
buildImage phpunit6

# requires 7.1
assertVersionAtLeast 7.1
buildImage phpunit7

# requires 7.1.3
assertVersionAtLeast 7.1.3
buildImage laravel5.6
buildImage laravel5.7
buildImage laravel5.8

# requires 7.1.3
assertVersionAtLeast 7.2.0
buildImage laravel6.0
