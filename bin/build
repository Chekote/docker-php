#!/usr/bin/env bash

ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"

. "$ROOT"/bin/lib/colors.sh
. "$ROOT"/bin/lib/log.sh
. "$ROOT"/bin/lib/out.sh

REPO=chekote/php

PATCH_VERSION=
#######################################
# Checks the exit code passed and exits with it if it is not zero
#
# Arguments:
#  1 the exit code to check
#######################################
exitCheck() {
  if [ $1 != 0 ]; then
    log.error "Got exit code $1, quitting."
    exit $1
  fi
}

#######################################
# Checks that the PHP version being built is between the two specified versions (inclusive)
#
# Arguments:
#  1 the lowest version of the range to check
#  2 the highest version of the range to check
#######################################
versionBetween() {
  ACTUAL_VERSION="${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}"
  if versionLessThan ${ACTUAL_VERSION} $1; then
    return 1;
  fi

  if versionGreaterThan ${ACTUAL_VERSION} $2; then
    return 1;
  fi

  return 0;
}

#######################################
# Checks two PHP versions to determine if the 1st is greater than the 2nd
#
# Arguments:
#  1 the 1st version to compare
#  2 the 2nd version to compare
# Globals:
#  REPO  the name of Docker Hub repo where the images are hosted
#######################################
versionGreaterThan() {
  docker container run --rm ${REPO}:7 php -r "version_compare('$1', '$2', '>') ? exit(1) : exit(0);";
  return $?
}

#######################################
# Checks two PHP versions to determine if the 1st is less than the 2nd
#
# Arguments:
#  1 the 1st version to compare
#  2 the 2nd version to compare
#######################################
versionLessThan() {
  docker container run --rm ${REPO}:7 php -r "version_compare('$1', '$2', '<') ? exit(1) : exit(0);";
  return $?
}

#######################################
# Asserts that PHP version being built equal to or higher than the specified version
#
# Arguments:
#  1 the version to assert
#######################################
assertVersionAtLeast() {
  ACTUAL_VERSION="${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}"
  if versionLessThan $1 ${ACTUAL_VERSION}; then
    out.warn "No further images supported for PHP version ${ACTUAL_VERSION}. Quitting..."
    exit 0
  fi
}

#######################################
# Builds and pushes all of the PHP images for the current major and minor version
#
# Arguments:
#  1 the image to build. Must have a matching .docker file in the root of the project.
# Globals:
#   IMAGE         the name of the image currently being build
#   REPO          the name of Docker Hub repo where the images are hosted
#   MAJOR_VERSION the major PHP version to build images for
#   MINOR_VERSION the minor PHP version to build images for
#   PATCH_VERSION the patch PHP version that was built
#######################################
buildImage() {
  IMAGE=$1
  local TAG_SUFFIX
  local PATCH_TAG
  local SHA

  if [ "${IMAGE}" = "php" ]; then
    TAG_SUFFIX=""
  else
    TAG_SUFFIX="-${IMAGE}"
  fi

  local MAJOR_TAG=${MAJOR_VERSION}${TAG_SUFFIX}
  local MINOR_TAG=${MAJOR_VERSION}.${MINOR_VERSION}${TAG_SUFFIX}

  out.info ""
  out.info "Building ${IMAGE} image"
  docker image build -f ${IMAGE}.docker --build-arg PHP_VERSION=${MAJOR_VERSION}.${MINOR_VERSION} -t ${REPO}:${MAJOR_TAG} . > logs/${IMAGE}.log 2>&1
  exitCheck $?

  out.success "Successfully built image"

  if [ "${IMAGE}" = "php" ]; then
    PATCH_VERSION=`docker run ${REPO}:${MAJOR_VERSION} php -r "echo explode('.', substr(PHP_VERSION, 0, strpos(PHP_VERSION, '-')))[2];"`
    log.info "PHP Patch Version: ${PATCH_VERSION}"
  fi

  local PATCH_TAG=${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}${TAG_SUFFIX}

  out.info ""
  out.info "Tagging image"
  tagImage ${REPO}:${MAJOR_TAG} ${REPO}:${MINOR_TAG}
  tagImage ${REPO}:${MAJOR_TAG} ${REPO}:${PATCH_TAG}
  out.success "Successfully created image tags"

  out.info ""
  out.info "Pushing ${IMAGE} image"
  pushImage ${REPO}:${MAJOR_TAG}
  pushImage ${REPO}:${MINOR_TAG}
  pushImage ${REPO}:${PATCH_TAG}
}

#######################################
# Pushes the specified image
#
# Arguments:
#  1 the image to push
#######################################
pushImage() {
  docker image push $1
  exitCheck $?
  out.success "Successfully pushed image"
}

#######################################
# Tags the specified image
#
# Arguments
#  1 the image to tag
#  2 the tag to use
#######################################
tagImage() {
  docker image tag $1 $2
  exitCheck $?
  out.success "Successfully tagged $2"
}

out.info "Please enter the major PHP version (e.g. 5, 7), followed by [ENTER]:"
read MAJOR_VERSION

out.info ""
out.info "Please enter the minor PHP version (e.g. 1, 2, 3), followed by [ENTER]:"
read MINOR_VERSION

buildImage php

# requires 5.3.2
assertVersionAtLeast 5.3.2
buildImage composer

# requires 5.3.3
assertVersionAtLeast 5.3.3
buildImage behat3.4

# requires 5.5.9
if versionBetween 5.5.9 7.1.16; then
  buildImage laravel5.1
else
  out.warn "Skipping Laravel 5.1. PHP version is not between 5.5.9 & 7.1.16"
fi

# requires 5.6
assertVersionAtLeast 5.6
buildImage phpunit5

# requires 5.6.4
if versionBetween 5.6.4 7.1.16; then
  buildImage laravel5.3
else
  out.warn "Skipping Laravel 5.3. PHP version is not between 5.6.4 & 7.1.16"
fi

# requires 7.0
assertVersionAtLeast 7.0
buildImage phpunit6

# requires 7.1
assertVersionAtLeast 7.1
buildImage phpunit7

# requires 7.1.3
assertVersionAtLeast 7.1.3
buildImage laravel5.6
buildImage laravel5.7
