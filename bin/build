#!/usr/bin/env bash

set -euo pipefail;

ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"

. "$ROOT"/bin/lib/colors.sh
. "$ROOT"/bin/lib/log.sh
. "$ROOT"/bin/lib/out.sh

OWNER=chekote

PATCH_VERSION=

#######################################
# Checks that the PHP version being built is between the two specified versions (inclusive)
#
# Arguments:
#  1 the lowest version of the range to check
#  2 the highest version of the range to check
# Return:
#  0 if the version being build is between the two specified versions. 1 if not.
#######################################
versionBetween() {
  local FULL_VERSION="$MAJOR_VERSION.$MINOR_VERSION.$PATCH_VERSION"
  if versionLessThan "$FULL_VERSION" "$1"; then
    return 1;
  fi

  if versionGreaterThan "$FULL_VERSION" "$2"; then
    return 1;
  fi

  return 0;
}

#######################################
# Checks two PHP versions to determine if the 1st is greater than the 2nd
#
# Arguments:
#  1 the 1st version to compare
#  2 the 2nd version to compare
# Globals:
#  OWNER the name of Docker Hub user where the images are hosted
# Return:
#  0 if the 1st version is greater than the 2nd. 1 if not.
#######################################
versionGreaterThan() {
  docker container run --rm "$OWNER/php:7" php -r "version_compare('$1', '$2', '>') ? exit(0) : exit(1);";
  return $?
}

#######################################
# Checks two PHP versions to determine if the 1st is less than the 2nd
#
# Arguments:
#  1 the 1st version to compare
#  2 the 2nd version to compare
# Return:
#  0 if the 1st version is less than the 2nd. 1 if not.
#######################################
versionLessThan() {
  docker container run --rm "$OWNER/php:7" php -r "version_compare('$1', '$2', '<') ? exit(0) : exit(1);";
  return $?
}

#######################################
# Asserts that PHP version being built equal to or higher than the specified version
#
# Arguments:
#  1 the version to assert
#######################################
assertVersionAtLeast() {
  local FULL_VERSION="$MAJOR_VERSION.$MINOR_VERSION.$PATCH_VERSION"
  if versionLessThan "$FULL_VERSION" "$1"; then
    out.warn "No further images supported for PHP version $FULL_VERSION. Quitting..."
    exit 0
  fi
}

#######################################
# Builds and pushes all of the PHP images for the current major and minor version
#
# Arguments:
#  1 the image to build. Must have a matching .docker file in the root of the project.
# Globals:
#   IMAGE         the name of the image currently being build
#   MAJOR_VERSION the major PHP version to build images for
#   MINOR_VERSION the minor PHP version to build images for
#   PATCH_VERSION the patch PHP version that was built
#######################################
buildImage() {
  IMAGE="$1"
  local MAJOR_TAG MINOR_TAG PATCH_TAG LATEST_TAG repo

  TAG_SUFFIX=$([[ "$IMAGE" == "php" ]] && echo "" || echo "php")

  MAJOR_TAG="$TAG_SUFFIX$MAJOR_VERSION"
  MINOR_TAG="$MAJOR_TAG.$MINOR_VERSION"

  repo="$OWNER/$IMAGE"

  buildMultiArchImage "$IMAGE" "$repo:$MAJOR_TAG"
  if [ "$IMAGE" = "php" ]; then
    updatePatchVersion "$IMAGE"
  fi

  PATCH_TAG="$MINOR_TAG.$PATCH_VERSION"
  LATEST_TAG="$PATCH_TAG-$(date '+%Y-%m-%d-%H-%M-%S')"

  buildMultiArchImage "$IMAGE" "$repo:$MINOR_TAG"
  buildMultiArchImage "$IMAGE" "$repo:$PATCH_TAG"
  buildMultiArchImage "$IMAGE" "$repo:$LATEST_TAG"
}

#######################################
# Builds and pushes a multi-arch image
#
# Ideally this should just build and not push, but buildx does not currently support loading.
#
# Arguments:
#   1 the image to build. Must have a matching .docker file in the root of the project.
#   2 the tag to use for the image
# Globals:
#   MAJOR_VERSION the major PHP version to build images for
#   MINOR_VERSION the minor PHP version to build images for
#######################################
buildMultiArchImage() {
  local IMAGE="$1"
  local TAG="$2"

  out.info ""
  out.info "Building $1 multi-arch image with tag '$2'"
  docker buildx build --push --platform linux/arm/v7,linux/arm64/v8,linux/amd64 -f "$1.docker" \
      --build-arg PHP_VERSION="$MAJOR_VERSION.$MINOR_VERSION" -t "$TAG" . > "logs/$1.log" 2>&1
  out.success "Successfully built & pushed multi-arch image with tag '$TAG'"

  log.info "Pulling multi-arch image '$TAG' since buildx does not support loading currently."
  log.info 'We will likely need this image as the base for the next one.'
  docker image pull "$TAG"
}

#######################################
# Tags the specified image
#
# Arguments
#  1 the image to tag
#  2 the tag to use
#######################################
tagImage() {
  docker image tag "$1" "$2"
  out.success "Successfully tagged $2"
}

#######################################
# Extracts the patch version from PHP major version image
#
# Arguments
#  1 the image to get the patch version from
#
# Globals:
#   PATCH_VERSION the patch PHP version. e.g. 27 for 7.2.27
#######################################
updatePatchVersion() {
   local IMAGE="$1"

   PATCH_VERSION=$(docker run --rm "$OWNER/$IMAGE:$MAJOR_VERSION" php -r '
       $version = ($dashPos = strpos(PHP_VERSION, "-")) === false ? PHP_VERSION : substr(PHP_VERSION, 0, $dashPos);
       echo explode(".", $version)[2];
   ')

   log.info "PHP Patch Version: $PATCH_VERSION"
}

#######################################
# Builds all images
#######################################
buildAll() {
  buildImage php

  # requires 5.3.2
  assertVersionAtLeast 5.3.2
  buildImage composer

  # requires 5.3.3
  assertVersionAtLeast 5.3.3
  buildImage behat3.4
  buildImage behat3.4-sqlite

  # requires 7.2.0
  assertVersionAtLeast 7.2.0
  buildImage phpunit8

  #requires 7.2.5
  assertVersionAtLeast 7.2.5
  buildImage laravel7.x

  #requires 7.3
  assertVersionAtLeast 7.3
  buildImage laravel8.x
  buildImage phpunit9

  #requires 8.0
  assertVersionAtLeast 8.0
  buildImage laravel9.x

  #requires 8.1
  assertVersionAtLeast 8.1
  buildImage laravel10.x
  buildImage phpunit10
}

for version in '8.1' '8.2' '8.3'; do
  IFS='.' read -r MAJOR_VERSION MINOR_VERSION <<< "$version"

  buildAll
done
